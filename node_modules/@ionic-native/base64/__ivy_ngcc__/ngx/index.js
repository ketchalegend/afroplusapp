import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Base64 = /** @class */ (function (_super) {
    __extends(Base64, _super);
    function Base64() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Base64.prototype.encodeFile = function (filePath) { return cordova(this, "encodeFile", {}, arguments); };
    Base64.pluginName = "Base64";
    Base64.plugin = "com-badrit-base64";
    Base64.pluginRef = "plugins.Base64";
    Base64.repo = "https://github.com/hazemhagrass/phonegap-base64";
    Base64.platforms = ["Android", "iOS"];
Base64.ɵfac = function Base64_Factory(t) { return ɵBase64_BaseFactory(t || Base64); };
Base64.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Base64, factory: function (t) { return Base64.ɵfac(t); } });
var ɵBase64_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Base64);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Base64, [{
        type: Injectable
    }], null, null); })();
    return Base64;
}(IonicNativePlugin));
export { Base64 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYmFzZTY0L25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtJQWdDNEIsMEJBQWlCOzs7O0lBTzNDLDJCQUFVLGFBQUMsUUFBZ0I7Ozs7OzBDQUl5TjswQ0FaclAsVUFBVTs7Ozs7MEJBQ0w7aUJBbENOO0VBa0M0QixpQkFBaUI7U0FBaEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBiZXRhXG4gKiBAbmFtZSBCYXNlNjRcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBQbHVnaW4gaXMgdXNlZCB0byBlbmNvZGUgYmFzZTY0IG9mIGFueSBmaWxlLCBpdCB1c2VzIGpzIGNvZGUgZm9yIGlPUywgYnV0IGluIGNhc2Ugb2YgYW5kcm9pZCBpdCB1c2VzIG5hdGl2ZSBjb2RlIHRvIGhhbmRsZSBhbmRyb2lkIHZlcnNpb25zIGxvd2VyIHRoYW4gdi4zXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXNlNjQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Jhc2U2NC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZTY0OiBCYXNlNjQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCBmaWxlUGF0aDogc3RyaW5nID0gJ2ZpbGU6Ly8vLi4uJztcbiAqIHRoaXMuYmFzZTY0LmVuY29kZUZpbGUoZmlsZVBhdGgpLnRoZW4oKGJhc2U2NEZpbGU6IHN0cmluZykgPT4ge1xuICogICBjb25zb2xlLmxvZyhiYXNlNjRGaWxlKTtcbiAqIH0sIChlcnIpID0+IHtcbiAqICAgY29uc29sZS5sb2coZXJyKTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0Jhc2U2NCcsXG4gIHBsdWdpbjogJ2NvbS1iYWRyaXQtYmFzZTY0JyxcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5CYXNlNjQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2hhemVtaGFncmFzcy9waG9uZWdhcC1iYXNlNjQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmFzZTY0IGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBlbmNvZGVzIGJhc2U2NCBvZiBhbnkgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVBhdGggQWJzb2x1dGUgZmlsZSBwYXRoXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBmaWxlIGlzIHN1Y2Nlc3NmdWxseSBlbmNvZGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGVuY29kZUZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=