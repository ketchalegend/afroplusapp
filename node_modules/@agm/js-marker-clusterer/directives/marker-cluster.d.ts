import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';
import { ClusterManager } from '../services/managers/cluster-manager';
import { CalculateFunction, ClusterOptions, ClusterStyle } from '../services/google-clusterer-types';
/**
 * AgmMarkerCluster clusters map marker if they are near together
 *
 * ### Example
 * ```typescript
 * import { Component } from '@angular/core';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  styles: [`
 *    agm-map {
 *      height: 300px;
 *    }
 * `],
 *  template: `
 *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
 *      <agm-marker-cluster>
 *        <agm-marker [latitude]="lat" [longitude]="lng" [label]="'M'">
 *        </agm-marker>
 *        <agm-marker [latitude]="lat2" [longitude]="lng2" [label]="'N'">
 *        </agm-marker>
 *      </agm-marker-cluster>
 *    </agm-map>
 *  `
 * })
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class AgmMarkerCluster implements OnDestroy, OnChanges, OnInit, ClusterOptions {
    private _clusterManager;
    /**
     * The grid size of a cluster in pixels
     */
    gridSize: number;
    /**
     * The maximum zoom level that a marker can be part of a cluster.
     */
    maxZoom: number;
    /**
     * Whether the default behaviour of clicking on a cluster is to zoom into it.
     */
    zoomOnClick: boolean;
    /**
     * Whether the center of each cluster should be the average of all markers in the cluster.
     */
    averageCenter: boolean;
    /**
     * The minimum number of markers to be in a cluster before the markers are hidden and a count is shown.
     */
    minimumClusterSize: number;
    /**
     * An object that has style properties.
     */
    styles: ClusterStyle[];
    /**
     * A function that calculates the cluster style and text based on the markers in the cluster.
     */
    calculator: CalculateFunction;
    imagePath: string;
    imageExtension: string;
    clusterClick: EventEmitter<void>;
    private _observableSubscriptions;
    constructor(_clusterManager: ClusterManager);
    /** @internal */
    ngOnDestroy(): void;
    /** @internal */
    ngOnChanges(changes: {
        [key: string]: SimpleChange;
    }): void;
    private _addEventListeners;
    /** @internal */
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AgmMarkerCluster, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AgmMarkerCluster, "agm-marker-cluster", never, { "gridSize": "gridSize"; "maxZoom": "maxZoom"; "zoomOnClick": "zoomOnClick"; "averageCenter": "averageCenter"; "minimumClusterSize": "minimumClusterSize"; "styles": "styles"; "calculator": "calculator"; "imagePath": "imagePath"; "imageExtension": "imageExtension"; }, { "clusterClick": "clusterClick"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLWNsdXN0ZXIuZC50cyIsInNvdXJjZXMiOlsibWFya2VyLWNsdXN0ZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbHVzdGVyTWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL21hbmFnZXJzL2NsdXN0ZXItbWFuYWdlcic7XG5pbXBvcnQgeyBDYWxjdWxhdGVGdW5jdGlvbiwgQ2x1c3Rlck9wdGlvbnMsIENsdXN0ZXJTdHlsZSB9IGZyb20gJy4uL3NlcnZpY2VzL2dvb2dsZS1jbHVzdGVyZXItdHlwZXMnO1xuLyoqXG4gKiBBZ21NYXJrZXJDbHVzdGVyIGNsdXN0ZXJzIG1hcCBtYXJrZXIgaWYgdGhleSBhcmUgbmVhciB0b2dldGhlclxuICpcbiAqICMjIyBFeGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqXG4gKiBAQ29tcG9uZW50KHtcbiAqICBzZWxlY3RvcjogJ215LW1hcC1jbXAnLFxuICogIHN0eWxlczogW2BcbiAqICAgIGFnbS1tYXAge1xuICogICAgICBoZWlnaHQ6IDMwMHB4O1xuICogICAgfVxuICogYF0sXG4gKiAgdGVtcGxhdGU6IGBcbiAqICAgIDxhZ20tbWFwIFtsYXRpdHVkZV09XCJsYXRcIiBbbG9uZ2l0dWRlXT1cImxuZ1wiIFt6b29tXT1cInpvb21cIj5cbiAqICAgICAgPGFnbS1tYXJrZXItY2x1c3Rlcj5cbiAqICAgICAgICA8YWdtLW1hcmtlciBbbGF0aXR1ZGVdPVwibGF0XCIgW2xvbmdpdHVkZV09XCJsbmdcIiBbbGFiZWxdPVwiJ00nXCI+XG4gKiAgICAgICAgPC9hZ20tbWFya2VyPlxuICogICAgICAgIDxhZ20tbWFya2VyIFtsYXRpdHVkZV09XCJsYXQyXCIgW2xvbmdpdHVkZV09XCJsbmcyXCIgW2xhYmVsXT1cIidOJ1wiPlxuICogICAgICAgIDwvYWdtLW1hcmtlcj5cbiAqICAgICAgPC9hZ20tbWFya2VyLWNsdXN0ZXI+XG4gKiAgICA8L2FnbS1tYXA+XG4gKiAgYFxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBZ21NYXJrZXJDbHVzdGVyIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIE9uSW5pdCwgQ2x1c3Rlck9wdGlvbnMge1xuICAgIHByaXZhdGUgX2NsdXN0ZXJNYW5hZ2VyO1xuICAgIC8qKlxuICAgICAqIFRoZSBncmlkIHNpemUgb2YgYSBjbHVzdGVyIGluIHBpeGVsc1xuICAgICAqL1xuICAgIGdyaWRTaXplOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gem9vbSBsZXZlbCB0aGF0IGEgbWFya2VyIGNhbiBiZSBwYXJ0IG9mIGEgY2x1c3Rlci5cbiAgICAgKi9cbiAgICBtYXhab29tOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgZGVmYXVsdCBiZWhhdmlvdXIgb2YgY2xpY2tpbmcgb24gYSBjbHVzdGVyIGlzIHRvIHpvb20gaW50byBpdC5cbiAgICAgKi9cbiAgICB6b29tT25DbGljazogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjZW50ZXIgb2YgZWFjaCBjbHVzdGVyIHNob3VsZCBiZSB0aGUgYXZlcmFnZSBvZiBhbGwgbWFya2VycyBpbiB0aGUgY2x1c3Rlci5cbiAgICAgKi9cbiAgICBhdmVyYWdlQ2VudGVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIG51bWJlciBvZiBtYXJrZXJzIHRvIGJlIGluIGEgY2x1c3RlciBiZWZvcmUgdGhlIG1hcmtlcnMgYXJlIGhpZGRlbiBhbmQgYSBjb3VudCBpcyBzaG93bi5cbiAgICAgKi9cbiAgICBtaW5pbXVtQ2x1c3RlclNpemU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgdGhhdCBoYXMgc3R5bGUgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBzdHlsZXM6IENsdXN0ZXJTdHlsZVtdO1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBjYWxjdWxhdGVzIHRoZSBjbHVzdGVyIHN0eWxlIGFuZCB0ZXh0IGJhc2VkIG9uIHRoZSBtYXJrZXJzIGluIHRoZSBjbHVzdGVyLlxuICAgICAqL1xuICAgIGNhbGN1bGF0b3I6IENhbGN1bGF0ZUZ1bmN0aW9uO1xuICAgIGltYWdlUGF0aDogc3RyaW5nO1xuICAgIGltYWdlRXh0ZW5zaW9uOiBzdHJpbmc7XG4gICAgY2x1c3RlckNsaWNrOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgcHJpdmF0ZSBfb2JzZXJ2YWJsZVN1YnNjcmlwdGlvbnM7XG4gICAgY29uc3RydWN0b3IoX2NsdXN0ZXJNYW5hZ2VyOiBDbHVzdGVyTWFuYWdlcik7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xuICAgIHByaXZhdGUgX2FkZEV2ZW50TGlzdGVuZXJzO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xufVxuIl19