import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import 'js-marker-clusterer';
import { AgmMarker, GoogleMapsAPIWrapper, MarkerManager } from '@agm/core';
import { AgmMarkerCluster } from '../../directives/marker-cluster';
import { ClusterOptions, MarkerClustererInstance } from '../google-clusterer-types';
import * as ɵngcc0 from '@angular/core';
export declare class ClusterManager extends MarkerManager {
    protected _mapsWrapper: GoogleMapsAPIWrapper;
    protected _zone: NgZone;
    private _clustererInstance;
    private _resolver;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _zone: NgZone);
    init(options: ClusterOptions): void;
    getClustererInstance(): Promise<MarkerClustererInstance>;
    addMarker(marker: AgmMarker): void;
    deleteMarker(marker: AgmMarker): Promise<void>;
    clearMarkers(): Promise<void>;
    setGridSize(c: AgmMarkerCluster): void;
    setMaxZoom(c: AgmMarkerCluster): void;
    setStyles(c: AgmMarkerCluster): void;
    setZoomOnClick(c: AgmMarkerCluster): void;
    setAverageCenter(c: AgmMarkerCluster): void;
    setImagePath(c: AgmMarkerCluster): void;
    setMinimumClusterSize(c: AgmMarkerCluster): void;
    setImageExtension(c: AgmMarkerCluster): void;
    createClusterEventObservable<T>(eventName: string): Observable<T>;
    setCalculator(c: AgmMarkerCluster): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClusterManager, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ClusterManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2x1c3Rlci1tYW5hZ2VyLmQudHMiLCJzb3VyY2VzIjpbImNsdXN0ZXItbWFuYWdlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgJ2pzLW1hcmtlci1jbHVzdGVyZXInO1xuaW1wb3J0IHsgQWdtTWFya2VyLCBHb29nbGVNYXBzQVBJV3JhcHBlciwgTWFya2VyTWFuYWdlciB9IGZyb20gJ0BhZ20vY29yZSc7XG5pbXBvcnQgeyBBZ21NYXJrZXJDbHVzdGVyIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9tYXJrZXItY2x1c3Rlcic7XG5pbXBvcnQgeyBDbHVzdGVyT3B0aW9ucywgTWFya2VyQ2x1c3RlcmVySW5zdGFuY2UgfSBmcm9tICcuLi9nb29nbGUtY2x1c3RlcmVyLXR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsdXN0ZXJNYW5hZ2VyIGV4dGVuZHMgTWFya2VyTWFuYWdlciB7XG4gICAgcHJvdGVjdGVkIF9tYXBzV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXI7XG4gICAgcHJvdGVjdGVkIF96b25lOiBOZ1pvbmU7XG4gICAgcHJpdmF0ZSBfY2x1c3RlcmVySW5zdGFuY2U7XG4gICAgcHJpdmF0ZSBfcmVzb2x2ZXI7XG4gICAgY29uc3RydWN0b3IoX21hcHNXcmFwcGVyOiBHb29nbGVNYXBzQVBJV3JhcHBlciwgX3pvbmU6IE5nWm9uZSk7XG4gICAgaW5pdChvcHRpb25zOiBDbHVzdGVyT3B0aW9ucyk6IHZvaWQ7XG4gICAgZ2V0Q2x1c3RlcmVySW5zdGFuY2UoKTogUHJvbWlzZTxNYXJrZXJDbHVzdGVyZXJJbnN0YW5jZT47XG4gICAgYWRkTWFya2VyKG1hcmtlcjogQWdtTWFya2VyKTogdm9pZDtcbiAgICBkZWxldGVNYXJrZXIobWFya2VyOiBBZ21NYXJrZXIpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGNsZWFyTWFya2VycygpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNldEdyaWRTaXplKGM6IEFnbU1hcmtlckNsdXN0ZXIpOiB2b2lkO1xuICAgIHNldE1heFpvb20oYzogQWdtTWFya2VyQ2x1c3Rlcik6IHZvaWQ7XG4gICAgc2V0U3R5bGVzKGM6IEFnbU1hcmtlckNsdXN0ZXIpOiB2b2lkO1xuICAgIHNldFpvb21PbkNsaWNrKGM6IEFnbU1hcmtlckNsdXN0ZXIpOiB2b2lkO1xuICAgIHNldEF2ZXJhZ2VDZW50ZXIoYzogQWdtTWFya2VyQ2x1c3Rlcik6IHZvaWQ7XG4gICAgc2V0SW1hZ2VQYXRoKGM6IEFnbU1hcmtlckNsdXN0ZXIpOiB2b2lkO1xuICAgIHNldE1pbmltdW1DbHVzdGVyU2l6ZShjOiBBZ21NYXJrZXJDbHVzdGVyKTogdm9pZDtcbiAgICBzZXRJbWFnZUV4dGVuc2lvbihjOiBBZ21NYXJrZXJDbHVzdGVyKTogdm9pZDtcbiAgICBjcmVhdGVDbHVzdGVyRXZlbnRPYnNlcnZhYmxlPFQ+KGV2ZW50TmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxUPjtcbiAgICBzZXRDYWxjdWxhdG9yKGM6IEFnbU1hcmtlckNsdXN0ZXIpOiB2b2lkO1xufVxuIl19