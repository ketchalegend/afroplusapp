{"version":3,"file":"ionic-image-loader.js.map","sources":["ng://ionic-image-loader/lib/services/image-loader-config.service.ts","ng://ionic-image-loader/lib/services/image-loader.service.ts","ng://ionic-image-loader/lib/ionic-image-loader.component.ts","ng://ionic-image-loader/lib/ionic-image-loader.module.ts"],"sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImageLoaderConfigService {\n  debugMode = false;\n\n  spinnerEnabled = true;\n\n  fallbackAsPlaceholder = false;\n\n  backgroundSize = 'contain';\n\n  backgroundRepeat = 'no-repeat';\n\n  display = 'block';\n\n  width = '100%';\n\n  height = '100%';\n\n  useImg = false;\n\n  fallbackUrl;\n\n  concurrency = 5;\n\n  maxCacheSize = -1;\n\n  maxCacheAge = -1;\n\n  imageReturnType: 'base64' | 'uri' = 'uri';\n\n  spinnerName;\n\n  spinnerColor;\n\n  httpHeaders: HttpHeaders;\n\n  // Must be default 'true' for the new WebView to show images\n  fileNameCachedWithExtension = true;\n\n  fallbackFileNameCachedExtension = '.jpg';\n\n  cacheDirectoryType: 'cache' | 'data' | 'external' = 'cache';\n\n  private _cacheDirectoryName = 'image-loader-cache';\n\n\n  get cacheDirectoryName() {\n    return this._cacheDirectoryName;\n  }\n\n  set cacheDirectoryName(name) {\n    name.replace(/\\W/g, '');\n    this._cacheDirectoryName = name;\n  }\n\n  /**\n   * Enables debug mode to receive console logs, errors, warnings\n   */\n  enableDebugMode() {\n    this.debugMode = true;\n  }\n\n  /**\n   * Enable/Disable the spinner by default. Defaults to true.\n   * @param enable set to true to enable\n   */\n  enableSpinner(enable: boolean) {\n    this.spinnerEnabled = enable;\n  }\n\n  /**\n   * Enable/Disable the fallback image as placeholder instead of the spinner. Defaults to false.\n   * @param enable set to true to enable\n   */\n  enableFallbackAsPlaceholder(enable: boolean) {\n    this.fallbackAsPlaceholder = enable;\n  }\n\n  /**\n   * Sets the cache directory name. Defaults to 'image-loader-cache'\n   * @param name name of directory\n   */\n  setCacheDirectoryName(name: string) {\n    this.cacheDirectoryName = name;\n  }\n\n  /**\n   * Set default height for images that are not using <img> tag\n   * @param height height\n   */\n  setHeight(height: string) {\n    this.height = height;\n  }\n\n  /**\n   * Set default width for images that are not using <img> tag\n   * @param width Width\n   */\n  setWidth(width: string) {\n    this.width = width;\n  }\n\n  /**\n   * Enable display mode for images that are not using <img> tag\n   * @param display Display mode\n   */\n  setDisplay(display: string) {\n    this.display = display;\n  }\n\n  /**\n   * Use <img> tag by default\n   * @param use set to true to use <img> tag by default\n   */\n  useImageTag(use: boolean) {\n    this.useImg = use;\n  }\n\n  /**\n   * Set default background size for images that are not using <img> tag\n   * @param backgroundSize Background size\n   */\n  setBackgroundSize(backgroundSize: string) {\n    this.backgroundSize = backgroundSize;\n  }\n\n  /**\n   * Set background repeat for images that are not using <img> tag\n   * @param backgroundRepeat Background repeat\n   */\n  setBackgroundRepeat(backgroundRepeat: string) {\n    this.backgroundRepeat = backgroundRepeat;\n  }\n\n  /**\n   * Set fallback URL to use when image src is undefined or did not resolve.\n   * This image will not be cached. This should ideally be a locally saved image.\n   * @param fallbackUrl The remote or local URL of the image\n   */\n  setFallbackUrl(fallbackUrl: string) {\n    this.fallbackUrl = fallbackUrl;\n  }\n\n  /**\n   * Set the maximum number of allowed connections at the same time.\n   * @param concurrency\n   */\n  setConcurrency(concurrency: number) {\n    this.concurrency = concurrency;\n  }\n\n  /**\n   * Sets the maximum allowed cache size\n   * @param cacheSize Cache size in bytes\n   */\n  setMaximumCacheSize(cacheSize: number) {\n    this.maxCacheSize = cacheSize;\n  }\n\n  /**\n   * Sets the maximum allowed cache age\n   * @param cacheAge Maximum cache age in milliseconds\n   */\n  setMaximumCacheAge(cacheAge: number) {\n    this.maxCacheAge = cacheAge;\n  }\n\n  /**\n   * Set the return type of cached images\n   * @param imageReturnType The return type; either 'base64' or 'uri'\n   */\n  setImageReturnType(imageReturnType: 'base64' | 'uri') {\n    this.imageReturnType = imageReturnType;\n  }\n\n  /**\n   * Set the default spinner name\n   * @param name\n   */\n  setSpinnerName(name: string) {\n    this.spinnerName = name;\n  }\n\n  /**\n   * Set the default spinner color\n   * @param color\n   */\n  setSpinnerColor(color: string) {\n    this.spinnerColor = color;\n  }\n\n  /**\n   * Set headers options for the HttpClient transfers.\n   * @param headers\n   */\n  setHttpHeaders(headers: HttpHeaders) {\n    this.httpHeaders = headers;\n  }\n\n  /**\n   * Set options for the FileTransfer plugin\n   * @param options\n   * @deprecated FileTransfer plugin removed.\n   */\n  setFileTransferOptions(options: {\n    trustAllHosts: boolean;\n    [key: string]: any;\n  }) {\n    // do nothing, plugin deprecated.\n  }\n\n  /**\n   * Enable/Disable the save filename of cached images with extension.  Defaults to false.\n   * @param enable set to true to enable\n   */\n  setFileNameCachedWithExtension(enable: boolean) {\n    this.fileNameCachedWithExtension = enable;\n  }\n\n  /**\n   * Set fallback extension filename of cached images.  Defaults to '.jpg'.\n   * @param extension fallback extension (e.x .jpg)\n   */\n  setFallbackFileNameCachedExtension(extension: string) {\n    this.fallbackFileNameCachedExtension = extension;\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { File, FileEntry } from '@ionic-native/file/ngx';\nimport { WebView } from '@ionic-native/ionic-webview/ngx';\nimport { Platform } from '@ionic/angular';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, first, take } from 'rxjs/operators';\nimport { ImageLoaderConfigService } from './image-loader-config.service';\n\ninterface IndexItem {\n  name: string;\n  modificationTime: Date;\n  size: number;\n}\n\ninterface QueueItem {\n  imageUrl: string;\n  resolve: Function;\n  reject: Function;\n}\n\ndeclare const Ionic: any;\n\nconst EXTENSIONS = ['jpg', 'png', 'jpeg', 'gif', 'svg', 'tiff'];\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImageLoaderService {\n\n  /**\n   * Indicates if the cache service is ready.\n   * When the cache service isn't ready, images are loaded via browser instead.\n   */\n  private isCacheReady = false;\n  /**\n   * Indicates if this service is initialized.\n   * This service is initialized once all the setup is done.\n   */\n  private isInit = false;\n  private initPromiseResolve: Function;\n  private initPromise = new Promise<void>(resolve => this.initPromiseResolve = resolve);\n  private lockSubject = new Subject<boolean>();\n  private lock$ = this.lockSubject.asObservable();\n  /**\n   * Number of concurrent requests allowed\n   */\n  private concurrency = 5;\n  /**\n   * Queue items\n   */\n  private queue: QueueItem[] = [];\n  private processing = 0;\n  /**\n   * Fast accessible Object for currently processing items\n   */\n  private currentlyProcessing: { [index: string]: Promise<any> } = {};\n  private cacheIndex: IndexItem[] = [];\n  private currentCacheSize = 0;\n  private indexed = false;\n  private lockedCallsQueue: Function[] = [];\n\n  constructor(\n    private config: ImageLoaderConfigService,\n    private file: File,\n    private http: HttpClient,\n    private platform: Platform,\n    private webview: WebView,\n  ) {\n    if (!platform.is('cordova')) {\n      // we are running on a browser, or using livereload\n      // plugin will not function in this case\n      this.isInit = true;\n      this.throwWarning(\n        'You are running on a browser or using livereload, IonicImageLoader will not function, falling back to browser loading.',\n      );\n      this.initPromiseResolve();\n    } else {\n      fromEvent(document, 'deviceready')\n        .pipe(first())\n        .subscribe(res => {\n          if (this.nativeAvailable) {\n            this.initCache();\n          } else {\n            // we are running on a browser, or using livereload\n            // plugin will not function in this case\n            this.isInit = true;\n            this.initPromiseResolve();\n            this.throwWarning(\n              'You are running on a browser or using livereload, IonicImageLoader will not function, falling back to browser loading.',\n            );\n          }\n        });\n    }\n  }\n\n  get nativeAvailable(): boolean {\n    return File.installed();\n  }\n\n  private get isCacheSpaceExceeded(): boolean {\n    return (\n      this.config.maxCacheSize > -1 &&\n      this.currentCacheSize > this.config.maxCacheSize\n    );\n  }\n\n  private get isWKWebView(): boolean {\n    return (\n      this.platform.is('ios') &&\n      (<any>window).webkit &&\n      (<any>window).webkit.messageHandlers\n    );\n  }\n\n  private get isIonicWKWebView(): boolean {\n    return (\n      //  Important: isWKWebview && isIonicWKWebview must be mutually excluse.\n      //  Otherwise the logic for copying to tmp under IOS will fail.\n      (this.platform.is('android') && this.webview) ||\n      (this.platform.is('android')) && (location.host === 'localhost:8080') ||\n      (<any>window).LiveReload);\n  }\n\n  private get isDevServer(): boolean {\n    return window['IonicDevServer'] !== undefined;\n  }\n\n  /**\n   * Check if we can process more items in the queue\n   */\n  private get canProcess(): boolean {\n    return this.queue.length > 0 && this.processing < this.concurrency;\n  }\n\n  ready(): Promise<void> {\n    return this.initPromise;\n  }\n\n  /**\n   * Preload an image\n   * @param imageUrl Image URL\n   * @returns returns a promise that resolves with the cached image URL\n   */\n  preload(imageUrl: string): Promise<string> {\n    return this.getImagePath(imageUrl);\n  }\n\n  getFileCacheDirectory() {\n    if (this.config.cacheDirectoryType === 'data') {\n      return this.file.dataDirectory;\n    } else if (this.config.cacheDirectoryType === 'external') {\n      return this.platform.is('android') ? this.file.externalDataDirectory : this.file.documentsDirectory;\n    }\n    return this.file.cacheDirectory;\n  }\n\n  /**\n   * Clears cache of a single image\n   * @param imageUrl Image URL\n   */\n  async clearImageCache(imageUrl: string) {\n    if (!this.platform.is('cordova')) {\n      return;\n    }\n\n    await this.ready();\n\n    this.runLocked(async () => {\n      const fileName = this.createFileName(imageUrl);\n      const route = this.getFileCacheDirectory() + this.config.cacheDirectoryName;\n      // pause any operations\n      this.isInit = false;\n\n      try {\n        await this.file.removeFile(route, fileName);\n\n        if (this.isWKWebView && !this.isIonicWKWebView) {\n          await this.file.removeFile(this.file.tempDirectory + this.config.cacheDirectoryName, fileName);\n        }\n      } catch (err) {\n        this.throwError(err);\n      }\n\n      return this.initCache(true);\n    });\n  }\n\n  /**\n   * Clears the cache\n   */\n  async clearCache() {\n    if (!this.platform.is('cordova')) {\n      return;\n    }\n\n    await this.ready();\n\n    this.runLocked(async () => {\n      try {\n        await this.file.removeRecursively(this.getFileCacheDirectory(), this.config.cacheDirectoryName);\n\n        if (this.isWKWebView && !this.isIonicWKWebView) {\n          // also clear the temp files\n          try {\n            this.file.removeRecursively(this.file.tempDirectory, this.config.cacheDirectoryName);\n          } catch (err) {\n            // Noop catch. Removing the tempDirectory might fail,\n            // as it is not persistent.\n          }\n        }\n      } catch (err) {\n        this.throwError(err);\n      }\n\n      return this.initCache(true);\n    });\n  }\n\n  /**\n   * Gets the filesystem path of an image.\n   * This will return the remote path if anything goes wrong or if the cache service isn't ready yet.\n   * @param imageUrl The remote URL of the image\n   * @returns Returns a promise that will always resolve with an image URL\n   */\n  async getImagePath(imageUrl: string): Promise<string> {\n    if (typeof imageUrl !== 'string' || imageUrl.length <= 0) {\n      throw new Error('The image url provided was empty or invalid.');\n    }\n\n    await this.ready();\n\n    if (!this.isCacheReady) {\n      this.throwWarning('The cache system is not running. Images will be loaded by your browser instead.');\n      return imageUrl;\n    }\n\n    if (this.isImageUrlRelative(imageUrl)) {\n      return imageUrl;\n    }\n\n    try {\n      return await this.getCachedImagePath(imageUrl);\n    } catch (err) {\n      // image doesn't exist in cache, lets fetch it and save it\n      return this.addItemToQueue(imageUrl);\n    }\n  }\n\n  private async processLockedQueue() {\n    if (await this.getLockedState()) {\n      return;\n    }\n\n    if (this.lockedCallsQueue.length > 0) {\n      await this.setLockedState(true);\n\n      try {\n        await this.lockedCallsQueue.slice(0, 1)[0]();\n      } catch (err) {\n        console.log('Error running locked function: ', err);\n      }\n\n      await this.setLockedState(false);\n      return this.processLockedQueue();\n    }\n  }\n\n  private getLockedState(): Promise<boolean> {\n    return this.lock$\n      .pipe(take(1))\n      .toPromise();\n  }\n\n  private awaitUnlocked(): Promise<boolean> {\n    return this.lock$\n      .pipe(\n        filter(locked => !!locked),\n        take(1),\n      )\n      .toPromise();\n  }\n\n  private async setLockedState(locked: boolean) {\n    this.lockSubject.next(locked);\n  }\n\n  private runLocked(fn: Function) {\n    this.lockedCallsQueue.push(fn);\n    this.processLockedQueue();\n  }\n\n  /**\n   * Returns if an imageUrl is an relative path\n   * @param imageUrl\n   */\n  private isImageUrlRelative(imageUrl: string) {\n    return !/^(https?|file):\\/\\/\\/?/i.test(imageUrl);\n  }\n\n  /**\n   * Add an item to the queue\n   * @param imageUrl\n   * @param resolve\n   * @param reject\n   */\n  private addItemToQueue(imageUrl: string, resolve?, reject?): void | Promise<any> {\n    let p: void | Promise<any>;\n\n    if (!resolve && !reject) {\n      p = new Promise<any>((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n    } else {\n      resolve = resolve || (() => {\n      });\n      reject = reject || (() => {\n      });\n    }\n\n    this.queue.push({\n      imageUrl,\n      resolve,\n      reject,\n    });\n\n    this.processQueue();\n\n    return p;\n  }\n\n  /**\n   * Processes one item from the queue\n   */\n  private async processQueue() {\n    // make sure we can process items first\n    if (!this.canProcess) {\n      return;\n    }\n\n    // increase the processing number\n    this.processing++;\n\n    // take the first item from queue\n    const currentItem: QueueItem = this.queue.splice(0, 1)[0];\n\n    // function to call when done processing this item\n    // this will reduce the processing number\n    // then will execute this function again to process any remaining items\n    const done = () => {\n      this.processing--;\n      this.processQueue();\n\n      // only delete if it's the last/unique occurrence in the queue\n      if (this.currentlyProcessing[currentItem.imageUrl] !== undefined && !this.currentlyInQueue(currentItem.imageUrl)) {\n        delete this.currentlyProcessing[currentItem.imageUrl];\n      }\n    };\n\n    const error = (e) => {\n      currentItem.reject();\n      this.throwError(e);\n      done();\n    };\n\n    if (this.currentlyProcessing[currentItem.imageUrl] !== undefined) {\n      try {\n        // Prevented same Image from loading at the same time\n        await this.currentlyProcessing[currentItem.imageUrl];\n        const localUrl = await this.getCachedImagePath(currentItem.imageUrl);\n        currentItem.resolve(localUrl);\n        done();\n      } catch (err) {\n        error(err);\n      }\n      return;\n    }\n\n    this.currentlyProcessing[currentItem.imageUrl] = (async () => {\n      // process more items concurrently if we can\n      if (this.canProcess) {\n        this.processQueue();\n      }\n\n      const localDir = this.getFileCacheDirectory() + this.config.cacheDirectoryName + '/';\n      const fileName = this.createFileName(currentItem.imageUrl);\n\n      try {\n        const data: Blob = await this.http.get(currentItem.imageUrl, {\n          responseType: 'blob',\n          headers: this.config.httpHeaders,\n        }).toPromise();\n\n        const file = await this.file.writeFile(localDir, fileName, data, {replace: true}) as FileEntry;\n\n        if (this.isCacheSpaceExceeded) {\n          this.maintainCacheSize();\n        }\n\n        await this.addFileToIndex(file);\n        const localUrl = await this.getCachedImagePath(currentItem.imageUrl);\n        currentItem.resolve(localUrl);\n        done();\n        this.maintainCacheSize();\n      } catch (err) {\n        error(err);\n        throw err;\n      }\n    })();\n\n  }\n\n  /**\n   * Search if the url is currently in the queue\n   * @param imageUrl Image url to search\n   */\n  private currentlyInQueue(imageUrl: string) {\n    return this.queue.some(item => item.imageUrl === imageUrl);\n  }\n\n  /**\n   * Initialize the cache service\n   * @param [replace] Whether to replace the cache directory if it already exists\n   */\n  private async initCache(replace?: boolean) {\n    this.concurrency = this.config.concurrency;\n\n    // create cache directories if they do not exist\n    try {\n      await this.createCacheDirectory(replace);\n      await this.indexCache();\n      this.isCacheReady = true;\n    } catch (err) {\n      this.throwError(err);\n    }\n\n    this.isInit = true;\n    this.initPromiseResolve();\n  }\n\n  /**\n   * Adds a file to index.\n   * Also deletes any files if they are older than the set maximum cache age.\n   * @param file FileEntry to index\n   */\n  private async addFileToIndex(file: FileEntry): Promise<any> {\n    const metadata = await new Promise<any>((resolve, reject) => file.getMetadata(resolve, reject));\n\n    if (\n      this.config.maxCacheAge > -1 &&\n      Date.now() - metadata.modificationTime.getTime() >\n      this.config.maxCacheAge\n    ) {\n      // file age exceeds maximum cache age\n      return this.removeFile(file.name);\n    } else {\n      // file age doesn't exceed maximum cache age, or maximum cache age isn't set\n      this.currentCacheSize += metadata.size;\n\n      // add item to index\n      this.cacheIndex.push({\n        name: file.name,\n        modificationTime: metadata.modificationTime,\n        size: metadata.size,\n      });\n    }\n  }\n\n  /**\n   * Indexes the cache if necessary\n   */\n  private async indexCache(): Promise<void> {\n    this.cacheIndex = [];\n\n    try {\n      const files = await this.file.listDir(this.getFileCacheDirectory(), this.config.cacheDirectoryName);\n      await Promise.all(files.map(this.addFileToIndex.bind(this)));\n      // Sort items by date. Most recent to oldest.\n      this.cacheIndex = this.cacheIndex.sort(\n        (a: IndexItem, b: IndexItem): number => (a > b ? -1 : a < b ? 1 : 0),\n      );\n      this.indexed = true;\n    } catch (err) {\n      this.throwError(err);\n    }\n  }\n\n  /**\n   * This method runs every time a new file is added.\n   * It checks the cache size and ensures that it doesn't exceed the maximum cache size set in the config.\n   * If the limit is reached, it will delete old images to create free space.\n   */\n  private async maintainCacheSize() {\n    if (this.config.maxCacheSize > -1 && this.indexed) {\n      const maintain = async () => {\n        if (this.currentCacheSize > this.config.maxCacheSize) {\n          // grab the first item in index since it's the oldest one\n          const file: IndexItem = this.cacheIndex.splice(0, 1)[0];\n\n          if (typeof file === 'undefined') {\n            return maintain();\n          }\n\n          // delete the file then process next file if necessary\n          try {\n            await this.removeFile(file.name);\n          } catch (err) {\n            // ignore errors, nothing we can do about it\n          }\n\n          this.currentCacheSize -= file.size;\n          return maintain();\n        }\n      };\n\n      return maintain();\n    }\n  }\n\n  /**\n   * Remove a file\n   * @param file The name of the file to remove\n   */\n  private async removeFile(file: string): Promise<any> {\n    await this.file.removeFile(this.getFileCacheDirectory() + this.config.cacheDirectoryName, file);\n\n    if (this.isWKWebView && !this.isIonicWKWebView) {\n      try {\n        return this.file.removeFile(this.file.tempDirectory + this.config.cacheDirectoryName, file);\n      } catch (err) {\n        // Noop catch. Removing the files from tempDirectory might fail, as it is not persistent.\n      }\n    }\n  }\n\n  /**\n   * Get the local path of a previously cached image if exists\n   * @param url The remote URL of the image\n   * @returns Returns a promise that resolves with the local path if exists, or rejects if doesn't exist\n   */\n  private async getCachedImagePath(url: string): Promise<string> {\n    await this.ready();\n\n    if (!this.isCacheReady) {\n      throw new Error('Cache is not ready');\n    }\n\n    // if we're running with livereload, ignore cache and call the resource from it's URL\n    if (this.isDevServer) {\n      return url;\n    }\n\n    // get file name\n    const fileName = this.createFileName(url);\n\n    // get full path\n    const dirPath = this.getFileCacheDirectory() + this.config.cacheDirectoryName,\n      tempDirPath = this.file.tempDirectory + this.config.cacheDirectoryName;\n\n    try {\n      // check if exists\n      const fileEntry = await this.file.resolveLocalFilesystemUrl(dirPath + '/' + fileName) as FileEntry;\n\n      // file exists in cache\n      if (this.config.imageReturnType === 'base64') {\n        // read the file as data url and return the base64 string.\n        // should always be successful as the existence of the file\n        // is already ensured\n        const base64: string = await this.file.readAsDataURL(dirPath, fileName);\n        return base64.replace('data:null', 'data:*/*');\n      } else if (this.config.imageReturnType !== 'uri') {\n        return;\n      }\n\n      // now check if iOS device & using WKWebView Engine.\n      // in this case only the tempDirectory is accessible,\n      // therefore the file needs to be copied into that directory first!\n      if (this.isIonicWKWebView) {\n        return this.normalizeUrl(fileEntry);\n      }\n\n      if (!this.isWKWebView) {\n        // return native path\n        return fileEntry.nativeURL;\n      }\n\n      // check if file already exists in temp directory\n      try {\n        const tempFileEntry = await this.file.resolveLocalFilesystemUrl(tempDirPath + '/' + fileName) as FileEntry;\n        // file exists in temp directory\n        // return native path\n        return this.normalizeUrl(tempFileEntry);\n      } catch (err) {\n        // file does not yet exist in the temp directory.\n        // copy it!\n        const tempFileEntry = await this.file\n          .copyFile(dirPath, fileName, tempDirPath, fileName) as FileEntry;\n\n        // now the file exists in the temp directory\n        // return native path\n        return this.normalizeUrl(tempFileEntry);\n      }\n    } catch (err) {\n      throw new Error('File does not exist');\n    }\n  }\n\n  /**\n   * Normalizes the image uri to a version that can be loaded in the webview\n   * @param fileEntry the FileEntry of the image file\n   * @returns the normalized Url\n   */\n\n  private normalizeUrl(fileEntry: FileEntry): string {\n    // Use Ionic normalizeUrl to generate the right URL for Ionic WKWebView\n    if (Ionic && typeof Ionic.normalizeURL === 'function') {\n      return Ionic.normalizeURL(fileEntry.nativeURL);\n    }\n    // use new webview function to do the trick\n    if (this.webview) {\n      return this.webview.convertFileSrc(fileEntry.nativeURL);\n    }\n    return fileEntry.nativeURL;\n  }\n\n  /**\n   * Throws a console error if debug mode is enabled\n   * @param args Error message\n   */\n  private throwError(...args: any[]) {\n    if (this.config.debugMode) {\n      args.unshift('ImageLoader Error: ');\n      console.error.apply(console, args);\n    }\n  }\n\n  /**\n   * Throws a console warning if debug mode is enabled\n   * @param args Error message\n   */\n  private throwWarning(...args: any[]) {\n    if (this.config.debugMode) {\n      args.unshift('ImageLoader Warning: ');\n      console.warn.apply(console, args);\n    }\n  }\n\n  /**\n   * Check if the cache directory exists\n   * @param directory The directory to check. Either this.file.tempDirectory or this.getFileCacheDirectory()\n   * @returns Returns a promise that resolves if exists, and rejects if it doesn't\n   */\n  private cacheDirectoryExists(directory: string): Promise<boolean> {\n    return this.file.checkDir(directory, this.config.cacheDirectoryName);\n  }\n\n  /**\n   * Create the cache directories\n   * @param replace override directory if exists\n   * @returns Returns a promise that resolves if the directories were created, and rejects on error\n   */\n  private createCacheDirectory(replace: boolean = false): Promise<any> {\n    let cacheDirectoryPromise: Promise<any>, tempDirectoryPromise: Promise<any>;\n\n    if (replace) {\n      // create or replace the cache directory\n      cacheDirectoryPromise = this.file.createDir(this.getFileCacheDirectory(), this.config.cacheDirectoryName, replace);\n    } else {\n      // check if the cache directory exists.\n      // if it does not exist create it!\n      cacheDirectoryPromise = this.cacheDirectoryExists(this.getFileCacheDirectory())\n        .catch(() => this.file.createDir(this.getFileCacheDirectory(), this.config.cacheDirectoryName, false));\n    }\n\n    if (this.isWKWebView && !this.isIonicWKWebView) {\n      if (replace) {\n        // create or replace the temp directory\n        tempDirectoryPromise = this.file.createDir(\n          this.file.tempDirectory,\n          this.config.cacheDirectoryName,\n          replace,\n        );\n      } else {\n        // check if the temp directory exists.\n        // if it does not exist create it!\n        tempDirectoryPromise = this.cacheDirectoryExists(\n          this.file.tempDirectory,\n        ).catch(() =>\n          this.file.createDir(\n            this.file.tempDirectory,\n            this.config.cacheDirectoryName,\n            false,\n          ),\n        );\n      }\n    } else {\n      tempDirectoryPromise = Promise.resolve();\n    }\n\n    return Promise.all([cacheDirectoryPromise, tempDirectoryPromise]);\n  }\n\n  /**\n   * Creates a unique file name out of the URL\n   * @param url URL of the file\n   * @returns Unique file name\n   */\n  private createFileName(url: string): string {\n    // hash the url to get a unique file name\n    return (\n      this.hashString(url).toString() +\n      (this.config.fileNameCachedWithExtension\n        ? this.getExtensionFromUrl(url)\n        : '')\n    );\n  }\n\n  /**\n   * Converts a string to a unique 32-bit int\n   * @param string string to hash\n   * @returns 32-bit int\n   */\n  private hashString(string: string): number {\n    let hash = 0,\n      char;\n    if (string.length === 0) {\n      return hash;\n    }\n    for (let i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n      // tslint:disable-next-line\n      hash = (hash << 5) - hash + char;\n      // tslint:disable-next-line\n      hash = hash & hash;\n    }\n    return hash;\n  }\n\n  /**\n   * Extract extension from filename or url\n   *\n   * @param url\n   * @returns\n   *\n   * Not always will url's contain a valid image extention. We'll check if any valid extention is supplied.\n   * If not, we will use the default.\n   */\n  private getExtensionFromUrl(url: string): string {\n    const urlWitoutParams = url.split(/\\#|\\?/)[0];\n    const ext: string = (urlWitoutParams.substr((~-urlWitoutParams.lastIndexOf('.') >>> 0) + 1) || '').toLowerCase();\n\n    return (\n      EXTENSIONS.indexOf(ext) >= 0 ? ext : this.config.fallbackFileNameCachedExtension\n    );\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\nimport { ImageLoaderConfigService } from './services/image-loader-config.service';\nimport { ImageLoaderService } from './services/image-loader.service';\n\nconst propMap: any = {\n  display: 'display',\n  height: 'height',\n  width: 'width',\n  backgroundSize: 'background-size',\n  backgroundRepeat: 'background-repeat',\n};\n\nexport interface ImageAttribute {\n  element: string;\n  value: string;\n}\n\n@Component({\n  selector: 'img-loader',\n  template: `\n    <ion-spinner\n        *ngIf=\"spinner && isLoading && !fallbackAsPlaceholder\"\n        [name]=\"spinnerName\"\n        [color]=\"spinnerColor\"\n    ></ion-spinner>\n    <ng-content></ng-content>\n  `,\n  styles: [\n    'ion-spinner { float: none; margin-left: auto; margin-right: auto; display: block; }',\n  ],\n})\nexport class IonicImageLoaderComponent implements OnInit {\n  /**\n   * Fallback URL to load when the image url fails to load or does not exist.\n   */\n  @Input() fallbackUrl: string = this.config.fallbackUrl;\n  /**\n   * Whether to show a spinner while the image loads\n   */\n  @Input() spinner: boolean = this.config.spinnerEnabled;\n  /**\n   * Whether to show the fallback image instead of a spinner while the image loads\n   */\n\n  @Input() fallbackAsPlaceholder: boolean = this.config.fallbackAsPlaceholder;\n  /**\n   * Attributes to pass through to img tag if _useImg == true\n   */\n  @Input() imgAttributes: ImageAttribute[] = [];\n  /**\n   * Enable/Disable caching\n   */\n  @Input() cache = true;\n  /**\n   * Width of the image. This will be ignored if using useImg.\n   */\n  @Input() width: string = this.config.width;\n  /**\n   * Height of the image. This will be ignored if using useImg.\n   */\n  @Input() height: string = this.config.height;\n  /**\n   * Display type of the image. This will be ignored if using useImg.\n   */\n  @Input() display: string = this.config.display;\n  /**\n   * Background size. This will be ignored if using useImg.\n   */\n  @Input() backgroundSize: string = this.config.backgroundSize;\n  /**\n   * Background repeat. This will be ignored if using useImg.\n   */\n  @Input() backgroundRepeat: string = this.config.backgroundRepeat;\n  /**\n   * Name of the spinner\n   */\n  @Input() spinnerName: string = this.config.spinnerName;\n  /**\n   * Color of the spinner\n   */\n  @Input() spinnerColor: string = this.config.spinnerColor;\n  /**\n   * Notify on image load..\n   */\n  @Output()\n  load: EventEmitter<IonicImageLoaderComponent> = new EventEmitter<IonicImageLoaderComponent>();\n  /**\n   * Indicates if the image is still loading\n   */\n  isLoading = true;\n  element: HTMLElement;\n\n  constructor(\n    private _element: ElementRef,\n    private renderer: Renderer2,\n    private imageLoader: ImageLoaderService,\n    private config: ImageLoaderConfigService,\n  ) {\n  }\n\n  private _useImg: boolean = this.config.useImg;\n\n  /**\n   * Use <img> tag\n   */\n  @Input()\n  set useImg(val: boolean) {\n    this._useImg = val !== false;\n  }\n\n  /**\n   * Convenience attribute to disable caching\n   */\n  @Input()\n  set noCache(val: boolean) {\n    this.cache = val !== false;\n  }\n\n  private _src: string;\n\n  get src(): string {\n    return this._src;\n  }\n\n  /**\n   * The URL of the image to load.\n   */\n  @Input()\n  set src(imageUrl: string) {\n    this._src = this.processImageUrl(imageUrl);\n    this.updateImage(this._src);\n  }\n\n  ngOnInit(): void {\n    if (this.fallbackAsPlaceholder && this.fallbackUrl) {\n      this.setImage(this.fallbackUrl, false);\n    }\n\n    if (!this.src) {\n      // image url was not passed\n      // this can happen when [src] is set to a variable that turned out to be undefined\n      // one example could be a list of users with their profile pictures\n      // in this case, it would be useful to use the fallback image instead\n      // if fallbackUrl was used as placeholder we do not need to set it again\n      if (!this.fallbackAsPlaceholder && this.fallbackUrl) {\n        // we're not going to cache the fallback image since it should be locally saved\n        this.setImage(this.fallbackUrl);\n      } else {\n        this.isLoading = false;\n      }\n    }\n  }\n\n  private updateImage(imageUrl: string) {\n    this.imageLoader\n      .getImagePath(imageUrl)\n      .then((url: string) => this.setImage(url))\n      .catch((error: any) => this.setImage(this.fallbackUrl || imageUrl));\n  }\n\n  /**\n   * Gets the image URL to be loaded and disables caching if necessary\n   */\n  private processImageUrl(imageUrl: string): string {\n    if (this.cache === false) {\n      // need to disable caching\n\n      if (imageUrl.indexOf('?') < 0) {\n        // add ? if doesn't exists\n        imageUrl += '?';\n      } else {\n        imageUrl += '&';\n      }\n      // append timestamp at the end to make URL unique\n      imageUrl += 'cache_buster=' + Date.now();\n    }\n\n    return imageUrl;\n  }\n\n  /**\n   * Set the image to be displayed\n   * @param imageUrl image src\n   * @param stopLoading set to true to mark the image as loaded\n   */\n  private setImage(imageUrl: string, stopLoading: boolean = true): void {\n    this.isLoading = !stopLoading;\n\n    if (this._useImg) {\n      // Using <img> tag\n      if (!this.element) {\n        // create img element if we dont have one\n        this.element = this.renderer.createElement('img');\n        this.renderer.appendChild(this._element.nativeElement, this.element);\n      }\n\n      // set it's src\n      this.renderer.setAttribute(this.element, 'src', imageUrl);\n\n      // if imgAttributes are defined, add them to our img element\n      this.imgAttributes.forEach((attribute) => {\n        this.renderer.setAttribute(this.element, attribute.element, attribute.value);\n      });\n      if (this.fallbackUrl && !this.imageLoader.nativeAvailable) {\n        this.renderer.listen(this.element, 'error', () =>\n          this.renderer.setAttribute(this.element, 'src', this.fallbackUrl),\n        );\n      }\n    } else {\n      // Not using <img> tag\n\n      this.element = this._element.nativeElement;\n\n      for (const prop in propMap) {\n        if (this[prop]) {\n          this.renderer.setStyle(this.element, propMap[prop], this[prop]);\n        }\n      }\n      this.renderer.setStyle(\n        this.element,\n        'background-image',\n        `url(\"${imageUrl || this.fallbackUrl}\")`,\n      );\n    }\n    if (stopLoading) {\n      this.load.emit(this);\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { File } from '@ionic-native/file/ngx';\nimport { IonicModule } from '@ionic/angular';\nimport { IonicImageLoaderComponent } from './ionic-image-loader.component';\n\nimport { ImageLoaderConfigService } from './services/image-loader-config.service';\nimport { ImageLoaderService } from './services/image-loader.service';\n\n@NgModule({\n  imports: [\n    IonicModule,\n    HttpClientModule,\n    CommonModule,\n  ],\n  declarations: [IonicImageLoaderComponent],\n  exports: [IonicImageLoaderComponent],\n})\nexport class IonicImageLoader {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: IonicImageLoader,\n      providers: [\n        ImageLoaderConfigService,\n        ImageLoaderService,\n        File,\n      ],\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
