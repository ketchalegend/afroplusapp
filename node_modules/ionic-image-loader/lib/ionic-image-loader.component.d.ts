import { ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import { ImageLoaderConfigService } from './services/image-loader-config.service';
import { ImageLoaderService } from './services/image-loader.service';
import * as ɵngcc0 from '@angular/core';
export interface ImageAttribute {
    element: string;
    value: string;
}
export declare class IonicImageLoaderComponent implements OnInit {
    private _element;
    private renderer;
    private imageLoader;
    private config;
    /**
     * Fallback URL to load when the image url fails to load or does not exist.
     */
    fallbackUrl: string;
    /**
     * Whether to show a spinner while the image loads
     */
    spinner: boolean;
    /**
     * Whether to show the fallback image instead of a spinner while the image loads
     */
    fallbackAsPlaceholder: boolean;
    /**
     * Attributes to pass through to img tag if _useImg == true
     */
    imgAttributes: ImageAttribute[];
    /**
     * Enable/Disable caching
     */
    cache: boolean;
    /**
     * Width of the image. This will be ignored if using useImg.
     */
    width: string;
    /**
     * Height of the image. This will be ignored if using useImg.
     */
    height: string;
    /**
     * Display type of the image. This will be ignored if using useImg.
     */
    display: string;
    /**
     * Background size. This will be ignored if using useImg.
     */
    backgroundSize: string;
    /**
     * Background repeat. This will be ignored if using useImg.
     */
    backgroundRepeat: string;
    /**
     * Name of the spinner
     */
    spinnerName: string;
    /**
     * Color of the spinner
     */
    spinnerColor: string;
    /**
     * Notify on image load..
     */
    load: EventEmitter<IonicImageLoaderComponent>;
    /**
     * Indicates if the image is still loading
     */
    isLoading: boolean;
    element: HTMLElement;
    constructor(_element: ElementRef, renderer: Renderer2, imageLoader: ImageLoaderService, config: ImageLoaderConfigService);
    private _useImg;
    /**
     * Use <img> tag
     */
    useImg: boolean;
    /**
     * Convenience attribute to disable caching
     */
    noCache: boolean;
    private _src;
    /**
    * The URL of the image to load.
    */
    src: string;
    ngOnInit(): void;
    private updateImage;
    /**
     * Gets the image URL to be loaded and disables caching if necessary
     */
    private processImageUrl;
    /**
     * Set the image to be displayed
     * @param imageUrl image src
     * @param stopLoading set to true to mark the image as loaded
     */
    private setImage;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonicImageLoaderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonicImageLoaderComponent, "img-loader", never, { "fallbackUrl": "fallbackUrl"; "spinner": "spinner"; "fallbackAsPlaceholder": "fallbackAsPlaceholder"; "imgAttributes": "imgAttributes"; "cache": "cache"; "width": "width"; "height": "height"; "display": "display"; "backgroundSize": "backgroundSize"; "backgroundRepeat": "backgroundRepeat"; "spinnerName": "spinnerName"; "spinnerColor": "spinnerColor"; "useImg": "useImg"; "noCache": "noCache"; "src": "src"; }, { "load": "load"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtaW1hZ2UtbG9hZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJpb25pYy1pbWFnZS1sb2FkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2RkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbWFnZUxvYWRlckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2ltYWdlLWxvYWRlci1jb25maWcuc2VydmljZSc7XG5pbXBvcnQgeyBJbWFnZUxvYWRlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2ltYWdlLWxvYWRlci5zZXJ2aWNlJztcbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VBdHRyaWJ1dGUge1xuICAgIGVsZW1lbnQ6IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW9uaWNJbWFnZUxvYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBfZWxlbWVudDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgaW1hZ2VMb2FkZXI7XG4gICAgcHJpdmF0ZSBjb25maWc7XG4gICAgLyoqXG4gICAgICogRmFsbGJhY2sgVVJMIHRvIGxvYWQgd2hlbiB0aGUgaW1hZ2UgdXJsIGZhaWxzIHRvIGxvYWQgb3IgZG9lcyBub3QgZXhpc3QuXG4gICAgICovXG4gICAgZmFsbGJhY2tVcmw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHNob3cgYSBzcGlubmVyIHdoaWxlIHRoZSBpbWFnZSBsb2Fkc1xuICAgICAqL1xuICAgIHNwaW5uZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzaG93IHRoZSBmYWxsYmFjayBpbWFnZSBpbnN0ZWFkIG9mIGEgc3Bpbm5lciB3aGlsZSB0aGUgaW1hZ2UgbG9hZHNcbiAgICAgKi9cbiAgICBmYWxsYmFja0FzUGxhY2Vob2xkZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlcyB0byBwYXNzIHRocm91Z2ggdG8gaW1nIHRhZyBpZiBfdXNlSW1nID09IHRydWVcbiAgICAgKi9cbiAgICBpbWdBdHRyaWJ1dGVzOiBJbWFnZUF0dHJpYnV0ZVtdO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZS9EaXNhYmxlIGNhY2hpbmdcbiAgICAgKi9cbiAgICBjYWNoZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiB0aGUgaW1hZ2UuIFRoaXMgd2lsbCBiZSBpZ25vcmVkIGlmIHVzaW5nIHVzZUltZy5cbiAgICAgKi9cbiAgICB3aWR0aDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEhlaWdodCBvZiB0aGUgaW1hZ2UuIFRoaXMgd2lsbCBiZSBpZ25vcmVkIGlmIHVzaW5nIHVzZUltZy5cbiAgICAgKi9cbiAgICBoZWlnaHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5IHR5cGUgb2YgdGhlIGltYWdlLiBUaGlzIHdpbGwgYmUgaWdub3JlZCBpZiB1c2luZyB1c2VJbWcuXG4gICAgICovXG4gICAgZGlzcGxheTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEJhY2tncm91bmQgc2l6ZS4gVGhpcyB3aWxsIGJlIGlnbm9yZWQgaWYgdXNpbmcgdXNlSW1nLlxuICAgICAqL1xuICAgIGJhY2tncm91bmRTaXplOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQmFja2dyb3VuZCByZXBlYXQuIFRoaXMgd2lsbCBiZSBpZ25vcmVkIGlmIHVzaW5nIHVzZUltZy5cbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogTmFtZSBvZiB0aGUgc3Bpbm5lclxuICAgICAqL1xuICAgIHNwaW5uZXJOYW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ29sb3Igb2YgdGhlIHNwaW5uZXJcbiAgICAgKi9cbiAgICBzcGlubmVyQ29sb3I6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBOb3RpZnkgb24gaW1hZ2UgbG9hZC4uXG4gICAgICovXG4gICAgbG9hZDogRXZlbnRFbWl0dGVyPElvbmljSW1hZ2VMb2FkZXJDb21wb25lbnQ+O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgaW1hZ2UgaXMgc3RpbGwgbG9hZGluZ1xuICAgICAqL1xuICAgIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihfZWxlbWVudDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgaW1hZ2VMb2FkZXI6IEltYWdlTG9hZGVyU2VydmljZSwgY29uZmlnOiBJbWFnZUxvYWRlckNvbmZpZ1NlcnZpY2UpO1xuICAgIHByaXZhdGUgX3VzZUltZztcbiAgICAvKipcbiAgICAgKiBVc2UgPGltZz4gdGFnXG4gICAgICovXG4gICAgdXNlSW1nOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENvbnZlbmllbmNlIGF0dHJpYnV0ZSB0byBkaXNhYmxlIGNhY2hpbmdcbiAgICAgKi9cbiAgICBub0NhY2hlOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3NyYztcbiAgICAvKipcbiAgICAqIFRoZSBVUkwgb2YgdGhlIGltYWdlIHRvIGxvYWQuXG4gICAgKi9cbiAgICBzcmM6IHN0cmluZztcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgdXBkYXRlSW1hZ2U7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW1hZ2UgVVJMIHRvIGJlIGxvYWRlZCBhbmQgZGlzYWJsZXMgY2FjaGluZyBpZiBuZWNlc3NhcnlcbiAgICAgKi9cbiAgICBwcml2YXRlIHByb2Nlc3NJbWFnZVVybDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGltYWdlIHRvIGJlIGRpc3BsYXllZFxuICAgICAqIEBwYXJhbSBpbWFnZVVybCBpbWFnZSBzcmNcbiAgICAgKiBAcGFyYW0gc3RvcExvYWRpbmcgc2V0IHRvIHRydWUgdG8gbWFyayB0aGUgaW1hZ2UgYXMgbG9hZGVkXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRJbWFnZTtcbn1cbiJdfQ==