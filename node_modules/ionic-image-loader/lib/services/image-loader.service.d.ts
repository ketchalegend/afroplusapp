import { HttpClient } from '@angular/common/http';
import { File } from '@ionic-native/file/ngx';
import { WebView } from '@ionic-native/ionic-webview/ngx';
import { Platform } from '@ionic/angular';
import { ImageLoaderConfigService } from './image-loader-config.service';
import * as ɵngcc0 from '@angular/core';
export declare class ImageLoaderService {
    private config;
    private file;
    private http;
    private platform;
    private webview;
    /**
     * Indicates if the cache service is ready.
     * When the cache service isn't ready, images are loaded via browser instead.
     */
    private isCacheReady;
    /**
     * Indicates if this service is initialized.
     * This service is initialized once all the setup is done.
     */
    private isInit;
    private initPromiseResolve;
    private initPromise;
    private lockSubject;
    private lock$;
    /**
     * Number of concurrent requests allowed
     */
    private concurrency;
    /**
     * Queue items
     */
    private queue;
    private processing;
    /**
     * Fast accessible Object for currently processing items
     */
    private currentlyProcessing;
    private cacheIndex;
    private currentCacheSize;
    private indexed;
    private lockedCallsQueue;
    constructor(config: ImageLoaderConfigService, file: File, http: HttpClient, platform: Platform, webview: WebView);
    readonly nativeAvailable: boolean;
    private readonly isCacheSpaceExceeded;
    private readonly isWKWebView;
    private readonly isIonicWKWebView;
    private readonly isDevServer;
    /**
     * Check if we can process more items in the queue
     */
    private readonly canProcess;
    ready(): Promise<void>;
    /**
     * Preload an image
     * @param imageUrl Image URL
     * @returns returns a promise that resolves with the cached image URL
     */
    preload(imageUrl: string): Promise<string>;
    getFileCacheDirectory(): string;
    /**
     * Clears cache of a single image
     * @param imageUrl Image URL
     */
    clearImageCache(imageUrl: string): Promise<void>;
    /**
     * Clears the cache
     */
    clearCache(): Promise<void>;
    /**
     * Gets the filesystem path of an image.
     * This will return the remote path if anything goes wrong or if the cache service isn't ready yet.
     * @param imageUrl The remote URL of the image
     * @returns Returns a promise that will always resolve with an image URL
     */
    getImagePath(imageUrl: string): Promise<string>;
    private processLockedQueue;
    private getLockedState;
    private awaitUnlocked;
    private setLockedState;
    private runLocked;
    /**
     * Returns if an imageUrl is an relative path
     * @param imageUrl
     */
    private isImageUrlRelative;
    /**
     * Add an item to the queue
     * @param imageUrl
     * @param resolve
     * @param reject
     */
    private addItemToQueue;
    /**
     * Processes one item from the queue
     */
    private processQueue;
    /**
     * Search if the url is currently in the queue
     * @param imageUrl Image url to search
     */
    private currentlyInQueue;
    /**
     * Initialize the cache service
     * @param [replace] Whether to replace the cache directory if it already exists
     */
    private initCache;
    /**
     * Adds a file to index.
     * Also deletes any files if they are older than the set maximum cache age.
     * @param file FileEntry to index
     */
    private addFileToIndex;
    /**
     * Indexes the cache if necessary
     */
    private indexCache;
    /**
     * This method runs every time a new file is added.
     * It checks the cache size and ensures that it doesn't exceed the maximum cache size set in the config.
     * If the limit is reached, it will delete old images to create free space.
     */
    private maintainCacheSize;
    /**
     * Remove a file
     * @param file The name of the file to remove
     */
    private removeFile;
    /**
     * Get the local path of a previously cached image if exists
     * @param url The remote URL of the image
     * @returns Returns a promise that resolves with the local path if exists, or rejects if doesn't exist
     */
    private getCachedImagePath;
    /**
     * Normalizes the image uri to a version that can be loaded in the webview
     * @param fileEntry the FileEntry of the image file
     * @returns the normalized Url
     */
    private normalizeUrl;
    /**
     * Throws a console error if debug mode is enabled
     * @param args Error message
     */
    private throwError;
    /**
     * Throws a console warning if debug mode is enabled
     * @param args Error message
     */
    private throwWarning;
    /**
     * Check if the cache directory exists
     * @param directory The directory to check. Either this.file.tempDirectory or this.getFileCacheDirectory()
     * @returns Returns a promise that resolves if exists, and rejects if it doesn't
     */
    private cacheDirectoryExists;
    /**
     * Create the cache directories
     * @param replace override directory if exists
     * @returns Returns a promise that resolves if the directories were created, and rejects on error
     */
    private createCacheDirectory;
    /**
     * Creates a unique file name out of the URL
     * @param url URL of the file
     * @returns Unique file name
     */
    private createFileName;
    /**
     * Converts a string to a unique 32-bit int
     * @param string string to hash
     * @returns 32-bit int
     */
    private hashString;
    /**
     * Extract extension from filename or url
     *
     * @param url
     * @returns
     *
     * Not always will url's contain a valid image extention. We'll check if any valid extention is supplied.
     * If not, we will use the default.
     */
    private getExtensionFromUrl;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageLoaderService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ImageLoaderService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtbG9hZGVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiaW1hZ2UtbG9hZGVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtTEEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgRmlsZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmlsZS9uZ3gnO1xuaW1wb3J0IHsgV2ViVmlldyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaW9uaWMtd2Vidmlldy9uZ3gnO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5pbXBvcnQgeyBJbWFnZUxvYWRlckNvbmZpZ1NlcnZpY2UgfSBmcm9tICcuL2ltYWdlLWxvYWRlci1jb25maWcuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbWFnZUxvYWRlclNlcnZpY2Uge1xuICAgIHByaXZhdGUgY29uZmlnO1xuICAgIHByaXZhdGUgZmlsZTtcbiAgICBwcml2YXRlIGh0dHA7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybTtcbiAgICBwcml2YXRlIHdlYnZpZXc7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBjYWNoZSBzZXJ2aWNlIGlzIHJlYWR5LlxuICAgICAqIFdoZW4gdGhlIGNhY2hlIHNlcnZpY2UgaXNuJ3QgcmVhZHksIGltYWdlcyBhcmUgbG9hZGVkIHZpYSBicm93c2VyIGluc3RlYWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0NhY2hlUmVhZHk7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoaXMgc2VydmljZSBpcyBpbml0aWFsaXplZC5cbiAgICAgKiBUaGlzIHNlcnZpY2UgaXMgaW5pdGlhbGl6ZWQgb25jZSBhbGwgdGhlIHNldHVwIGlzIGRvbmUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc0luaXQ7XG4gICAgcHJpdmF0ZSBpbml0UHJvbWlzZVJlc29sdmU7XG4gICAgcHJpdmF0ZSBpbml0UHJvbWlzZTtcbiAgICBwcml2YXRlIGxvY2tTdWJqZWN0O1xuICAgIHByaXZhdGUgbG9jayQ7XG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIGNvbmN1cnJlbnQgcmVxdWVzdHMgYWxsb3dlZFxuICAgICAqL1xuICAgIHByaXZhdGUgY29uY3VycmVuY3k7XG4gICAgLyoqXG4gICAgICogUXVldWUgaXRlbXNcbiAgICAgKi9cbiAgICBwcml2YXRlIHF1ZXVlO1xuICAgIHByaXZhdGUgcHJvY2Vzc2luZztcbiAgICAvKipcbiAgICAgKiBGYXN0IGFjY2Vzc2libGUgT2JqZWN0IGZvciBjdXJyZW50bHkgcHJvY2Vzc2luZyBpdGVtc1xuICAgICAqL1xuICAgIHByaXZhdGUgY3VycmVudGx5UHJvY2Vzc2luZztcbiAgICBwcml2YXRlIGNhY2hlSW5kZXg7XG4gICAgcHJpdmF0ZSBjdXJyZW50Q2FjaGVTaXplO1xuICAgIHByaXZhdGUgaW5kZXhlZDtcbiAgICBwcml2YXRlIGxvY2tlZENhbGxzUXVldWU7XG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBJbWFnZUxvYWRlckNvbmZpZ1NlcnZpY2UsIGZpbGU6IEZpbGUsIGh0dHA6IEh0dHBDbGllbnQsIHBsYXRmb3JtOiBQbGF0Zm9ybSwgd2VidmlldzogV2ViVmlldyk7XG4gICAgcmVhZG9ubHkgbmF0aXZlQXZhaWxhYmxlOiBib29sZWFuO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaXNDYWNoZVNwYWNlRXhjZWVkZWQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpc1dLV2ViVmlldztcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlzSW9uaWNXS1dlYlZpZXc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0RldlNlcnZlcjtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB3ZSBjYW4gcHJvY2VzcyBtb3JlIGl0ZW1zIGluIHRoZSBxdWV1ZVxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FuUHJvY2VzcztcbiAgICByZWFkeSgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIFByZWxvYWQgYW4gaW1hZ2VcbiAgICAgKiBAcGFyYW0gaW1hZ2VVcmwgSW1hZ2UgVVJMXG4gICAgICogQHJldHVybnMgcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjYWNoZWQgaW1hZ2UgVVJMXG4gICAgICovXG4gICAgcHJlbG9hZChpbWFnZVVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xuICAgIGdldEZpbGVDYWNoZURpcmVjdG9yeSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGNhY2hlIG9mIGEgc2luZ2xlIGltYWdlXG4gICAgICogQHBhcmFtIGltYWdlVXJsIEltYWdlIFVSTFxuICAgICAqL1xuICAgIGNsZWFySW1hZ2VDYWNoZShpbWFnZVVybDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGNhY2hlXG4gICAgICovXG4gICAgY2xlYXJDYWNoZSgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpbGVzeXN0ZW0gcGF0aCBvZiBhbiBpbWFnZS5cbiAgICAgKiBUaGlzIHdpbGwgcmV0dXJuIHRoZSByZW1vdGUgcGF0aCBpZiBhbnl0aGluZyBnb2VzIHdyb25nIG9yIGlmIHRoZSBjYWNoZSBzZXJ2aWNlIGlzbid0IHJlYWR5IHlldC5cbiAgICAgKiBAcGFyYW0gaW1hZ2VVcmwgVGhlIHJlbW90ZSBVUkwgb2YgdGhlIGltYWdlXG4gICAgICogQHJldHVybnMgUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGFsd2F5cyByZXNvbHZlIHdpdGggYW4gaW1hZ2UgVVJMXG4gICAgICovXG4gICAgZ2V0SW1hZ2VQYXRoKGltYWdlVXJsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XG4gICAgcHJpdmF0ZSBwcm9jZXNzTG9ja2VkUXVldWU7XG4gICAgcHJpdmF0ZSBnZXRMb2NrZWRTdGF0ZTtcbiAgICBwcml2YXRlIGF3YWl0VW5sb2NrZWQ7XG4gICAgcHJpdmF0ZSBzZXRMb2NrZWRTdGF0ZTtcbiAgICBwcml2YXRlIHJ1bkxvY2tlZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIGFuIGltYWdlVXJsIGlzIGFuIHJlbGF0aXZlIHBhdGhcbiAgICAgKiBAcGFyYW0gaW1hZ2VVcmxcbiAgICAgKi9cbiAgICBwcml2YXRlIGlzSW1hZ2VVcmxSZWxhdGl2ZTtcbiAgICAvKipcbiAgICAgKiBBZGQgYW4gaXRlbSB0byB0aGUgcXVldWVcbiAgICAgKiBAcGFyYW0gaW1hZ2VVcmxcbiAgICAgKiBAcGFyYW0gcmVzb2x2ZVxuICAgICAqIEBwYXJhbSByZWplY3RcbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZEl0ZW1Ub1F1ZXVlO1xuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyBvbmUgaXRlbSBmcm9tIHRoZSBxdWV1ZVxuICAgICAqL1xuICAgIHByaXZhdGUgcHJvY2Vzc1F1ZXVlO1xuICAgIC8qKlxuICAgICAqIFNlYXJjaCBpZiB0aGUgdXJsIGlzIGN1cnJlbnRseSBpbiB0aGUgcXVldWVcbiAgICAgKiBAcGFyYW0gaW1hZ2VVcmwgSW1hZ2UgdXJsIHRvIHNlYXJjaFxuICAgICAqL1xuICAgIHByaXZhdGUgY3VycmVudGx5SW5RdWV1ZTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBjYWNoZSBzZXJ2aWNlXG4gICAgICogQHBhcmFtIFtyZXBsYWNlXSBXaGV0aGVyIHRvIHJlcGxhY2UgdGhlIGNhY2hlIGRpcmVjdG9yeSBpZiBpdCBhbHJlYWR5IGV4aXN0c1xuICAgICAqL1xuICAgIHByaXZhdGUgaW5pdENhY2hlO1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBmaWxlIHRvIGluZGV4LlxuICAgICAqIEFsc28gZGVsZXRlcyBhbnkgZmlsZXMgaWYgdGhleSBhcmUgb2xkZXIgdGhhbiB0aGUgc2V0IG1heGltdW0gY2FjaGUgYWdlLlxuICAgICAqIEBwYXJhbSBmaWxlIEZpbGVFbnRyeSB0byBpbmRleFxuICAgICAqL1xuICAgIHByaXZhdGUgYWRkRmlsZVRvSW5kZXg7XG4gICAgLyoqXG4gICAgICogSW5kZXhlcyB0aGUgY2FjaGUgaWYgbmVjZXNzYXJ5XG4gICAgICovXG4gICAgcHJpdmF0ZSBpbmRleENhY2hlO1xuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJ1bnMgZXZlcnkgdGltZSBhIG5ldyBmaWxlIGlzIGFkZGVkLlxuICAgICAqIEl0IGNoZWNrcyB0aGUgY2FjaGUgc2l6ZSBhbmQgZW5zdXJlcyB0aGF0IGl0IGRvZXNuJ3QgZXhjZWVkIHRoZSBtYXhpbXVtIGNhY2hlIHNpemUgc2V0IGluIHRoZSBjb25maWcuXG4gICAgICogSWYgdGhlIGxpbWl0IGlzIHJlYWNoZWQsIGl0IHdpbGwgZGVsZXRlIG9sZCBpbWFnZXMgdG8gY3JlYXRlIGZyZWUgc3BhY2UuXG4gICAgICovXG4gICAgcHJpdmF0ZSBtYWludGFpbkNhY2hlU2l6ZTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBmaWxlXG4gICAgICogQHBhcmFtIGZpbGUgVGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gcmVtb3ZlXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW1vdmVGaWxlO1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbG9jYWwgcGF0aCBvZiBhIHByZXZpb3VzbHkgY2FjaGVkIGltYWdlIGlmIGV4aXN0c1xuICAgICAqIEBwYXJhbSB1cmwgVGhlIHJlbW90ZSBVUkwgb2YgdGhlIGltYWdlXG4gICAgICogQHJldHVybnMgUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBsb2NhbCBwYXRoIGlmIGV4aXN0cywgb3IgcmVqZWN0cyBpZiBkb2Vzbid0IGV4aXN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDYWNoZWRJbWFnZVBhdGg7XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplcyB0aGUgaW1hZ2UgdXJpIHRvIGEgdmVyc2lvbiB0aGF0IGNhbiBiZSBsb2FkZWQgaW4gdGhlIHdlYnZpZXdcbiAgICAgKiBAcGFyYW0gZmlsZUVudHJ5IHRoZSBGaWxlRW50cnkgb2YgdGhlIGltYWdlIGZpbGVcbiAgICAgKiBAcmV0dXJucyB0aGUgbm9ybWFsaXplZCBVcmxcbiAgICAgKi9cbiAgICBwcml2YXRlIG5vcm1hbGl6ZVVybDtcbiAgICAvKipcbiAgICAgKiBUaHJvd3MgYSBjb25zb2xlIGVycm9yIGlmIGRlYnVnIG1vZGUgaXMgZW5hYmxlZFxuICAgICAqIEBwYXJhbSBhcmdzIEVycm9yIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBwcml2YXRlIHRocm93RXJyb3I7XG4gICAgLyoqXG4gICAgICogVGhyb3dzIGEgY29uc29sZSB3YXJuaW5nIGlmIGRlYnVnIG1vZGUgaXMgZW5hYmxlZFxuICAgICAqIEBwYXJhbSBhcmdzIEVycm9yIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBwcml2YXRlIHRocm93V2FybmluZztcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgY2FjaGUgZGlyZWN0b3J5IGV4aXN0c1xuICAgICAqIEBwYXJhbSBkaXJlY3RvcnkgVGhlIGRpcmVjdG9yeSB0byBjaGVjay4gRWl0aGVyIHRoaXMuZmlsZS50ZW1wRGlyZWN0b3J5IG9yIHRoaXMuZ2V0RmlsZUNhY2hlRGlyZWN0b3J5KClcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIGV4aXN0cywgYW5kIHJlamVjdHMgaWYgaXQgZG9lc24ndFxuICAgICAqL1xuICAgIHByaXZhdGUgY2FjaGVEaXJlY3RvcnlFeGlzdHM7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBjYWNoZSBkaXJlY3Rvcmllc1xuICAgICAqIEBwYXJhbSByZXBsYWNlIG92ZXJyaWRlIGRpcmVjdG9yeSBpZiBleGlzdHNcbiAgICAgKiBAcmV0dXJucyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBkaXJlY3RvcmllcyB3ZXJlIGNyZWF0ZWQsIGFuZCByZWplY3RzIG9uIGVycm9yXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVDYWNoZURpcmVjdG9yeTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdW5pcXVlIGZpbGUgbmFtZSBvdXQgb2YgdGhlIFVSTFxuICAgICAqIEBwYXJhbSB1cmwgVVJMIG9mIHRoZSBmaWxlXG4gICAgICogQHJldHVybnMgVW5pcXVlIGZpbGUgbmFtZVxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlRmlsZU5hbWU7XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYSBzdHJpbmcgdG8gYSB1bmlxdWUgMzItYml0IGludFxuICAgICAqIEBwYXJhbSBzdHJpbmcgc3RyaW5nIHRvIGhhc2hcbiAgICAgKiBAcmV0dXJucyAzMi1iaXQgaW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBoYXNoU3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEV4dHJhY3QgZXh0ZW5zaW9uIGZyb20gZmlsZW5hbWUgb3IgdXJsXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJsXG4gICAgICogQHJldHVybnNcbiAgICAgKlxuICAgICAqIE5vdCBhbHdheXMgd2lsbCB1cmwncyBjb250YWluIGEgdmFsaWQgaW1hZ2UgZXh0ZW50aW9uLiBXZSdsbCBjaGVjayBpZiBhbnkgdmFsaWQgZXh0ZW50aW9uIGlzIHN1cHBsaWVkLlxuICAgICAqIElmIG5vdCwgd2Ugd2lsbCB1c2UgdGhlIGRlZmF1bHQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRFeHRlbnNpb25Gcm9tVXJsO1xufVxuIl19