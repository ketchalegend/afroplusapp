import { HttpHeaders } from '@angular/common/http';
import * as ɵngcc0 from '@angular/core';
export declare class ImageLoaderConfigService {
    debugMode: boolean;
    spinnerEnabled: boolean;
    fallbackAsPlaceholder: boolean;
    backgroundSize: string;
    backgroundRepeat: string;
    display: string;
    width: string;
    height: string;
    useImg: boolean;
    fallbackUrl: any;
    concurrency: number;
    maxCacheSize: number;
    maxCacheAge: number;
    imageReturnType: 'base64' | 'uri';
    spinnerName: any;
    spinnerColor: any;
    httpHeaders: HttpHeaders;
    fileNameCachedWithExtension: boolean;
    fallbackFileNameCachedExtension: string;
    cacheDirectoryType: 'cache' | 'data' | 'external';
    private _cacheDirectoryName;
    cacheDirectoryName: string;
    /**
     * Enables debug mode to receive console logs, errors, warnings
     */
    enableDebugMode(): void;
    /**
     * Enable/Disable the spinner by default. Defaults to true.
     * @param enable set to true to enable
     */
    enableSpinner(enable: boolean): void;
    /**
     * Enable/Disable the fallback image as placeholder instead of the spinner. Defaults to false.
     * @param enable set to true to enable
     */
    enableFallbackAsPlaceholder(enable: boolean): void;
    /**
     * Sets the cache directory name. Defaults to 'image-loader-cache'
     * @param name name of directory
     */
    setCacheDirectoryName(name: string): void;
    /**
     * Set default height for images that are not using <img> tag
     * @param height height
     */
    setHeight(height: string): void;
    /**
     * Set default width for images that are not using <img> tag
     * @param width Width
     */
    setWidth(width: string): void;
    /**
     * Enable display mode for images that are not using <img> tag
     * @param display Display mode
     */
    setDisplay(display: string): void;
    /**
     * Use <img> tag by default
     * @param use set to true to use <img> tag by default
     */
    useImageTag(use: boolean): void;
    /**
     * Set default background size for images that are not using <img> tag
     * @param backgroundSize Background size
     */
    setBackgroundSize(backgroundSize: string): void;
    /**
     * Set background repeat for images that are not using <img> tag
     * @param backgroundRepeat Background repeat
     */
    setBackgroundRepeat(backgroundRepeat: string): void;
    /**
     * Set fallback URL to use when image src is undefined or did not resolve.
     * This image will not be cached. This should ideally be a locally saved image.
     * @param fallbackUrl The remote or local URL of the image
     */
    setFallbackUrl(fallbackUrl: string): void;
    /**
     * Set the maximum number of allowed connections at the same time.
     * @param concurrency
     */
    setConcurrency(concurrency: number): void;
    /**
     * Sets the maximum allowed cache size
     * @param cacheSize Cache size in bytes
     */
    setMaximumCacheSize(cacheSize: number): void;
    /**
     * Sets the maximum allowed cache age
     * @param cacheAge Maximum cache age in milliseconds
     */
    setMaximumCacheAge(cacheAge: number): void;
    /**
     * Set the return type of cached images
     * @param imageReturnType The return type; either 'base64' or 'uri'
     */
    setImageReturnType(imageReturnType: 'base64' | 'uri'): void;
    /**
     * Set the default spinner name
     * @param name
     */
    setSpinnerName(name: string): void;
    /**
     * Set the default spinner color
     * @param color
     */
    setSpinnerColor(color: string): void;
    /**
     * Set headers options for the HttpClient transfers.
     * @param headers
     */
    setHttpHeaders(headers: HttpHeaders): void;
    /**
     * Set options for the FileTransfer plugin
     * @param options
     * @deprecated FileTransfer plugin removed.
     */
    setFileTransferOptions(options: {
        trustAllHosts: boolean;
        [key: string]: any;
    }): void;
    /**
     * Enable/Disable the save filename of cached images with extension.  Defaults to false.
     * @param enable set to true to enable
     */
    setFileNameCachedWithExtension(enable: boolean): void;
    /**
     * Set fallback extension filename of cached images.  Defaults to '.jpg'.
     * @param extension fallback extension (e.x .jpg)
     */
    setFallbackFileNameCachedExtension(extension: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageLoaderConfigService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ImageLoaderConfigService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtbG9hZGVyLWNvbmZpZy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImltYWdlLWxvYWRlci1jb25maWcuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9JQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW1hZ2VMb2FkZXJDb25maWdTZXJ2aWNlIHtcbiAgICBkZWJ1Z01vZGU6IGJvb2xlYW47XG4gICAgc3Bpbm5lckVuYWJsZWQ6IGJvb2xlYW47XG4gICAgZmFsbGJhY2tBc1BsYWNlaG9sZGVyOiBib29sZWFuO1xuICAgIGJhY2tncm91bmRTaXplOiBzdHJpbmc7XG4gICAgYmFja2dyb3VuZFJlcGVhdDogc3RyaW5nO1xuICAgIGRpc3BsYXk6IHN0cmluZztcbiAgICB3aWR0aDogc3RyaW5nO1xuICAgIGhlaWdodDogc3RyaW5nO1xuICAgIHVzZUltZzogYm9vbGVhbjtcbiAgICBmYWxsYmFja1VybDogYW55O1xuICAgIGNvbmN1cnJlbmN5OiBudW1iZXI7XG4gICAgbWF4Q2FjaGVTaXplOiBudW1iZXI7XG4gICAgbWF4Q2FjaGVBZ2U6IG51bWJlcjtcbiAgICBpbWFnZVJldHVyblR5cGU6ICdiYXNlNjQnIHwgJ3VyaSc7XG4gICAgc3Bpbm5lck5hbWU6IGFueTtcbiAgICBzcGlubmVyQ29sb3I6IGFueTtcbiAgICBodHRwSGVhZGVyczogSHR0cEhlYWRlcnM7XG4gICAgZmlsZU5hbWVDYWNoZWRXaXRoRXh0ZW5zaW9uOiBib29sZWFuO1xuICAgIGZhbGxiYWNrRmlsZU5hbWVDYWNoZWRFeHRlbnNpb246IHN0cmluZztcbiAgICBjYWNoZURpcmVjdG9yeVR5cGU6ICdjYWNoZScgfCAnZGF0YScgfCAnZXh0ZXJuYWwnO1xuICAgIHByaXZhdGUgX2NhY2hlRGlyZWN0b3J5TmFtZTtcbiAgICBjYWNoZURpcmVjdG9yeU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIGRlYnVnIG1vZGUgdG8gcmVjZWl2ZSBjb25zb2xlIGxvZ3MsIGVycm9ycywgd2FybmluZ3NcbiAgICAgKi9cbiAgICBlbmFibGVEZWJ1Z01vZGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFbmFibGUvRGlzYWJsZSB0aGUgc3Bpbm5lciBieSBkZWZhdWx0LiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAqIEBwYXJhbSBlbmFibGUgc2V0IHRvIHRydWUgdG8gZW5hYmxlXG4gICAgICovXG4gICAgZW5hYmxlU3Bpbm5lcihlbmFibGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZS9EaXNhYmxlIHRoZSBmYWxsYmFjayBpbWFnZSBhcyBwbGFjZWhvbGRlciBpbnN0ZWFkIG9mIHRoZSBzcGlubmVyLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0gZW5hYmxlIHNldCB0byB0cnVlIHRvIGVuYWJsZVxuICAgICAqL1xuICAgIGVuYWJsZUZhbGxiYWNrQXNQbGFjZWhvbGRlcihlbmFibGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNhY2hlIGRpcmVjdG9yeSBuYW1lLiBEZWZhdWx0cyB0byAnaW1hZ2UtbG9hZGVyLWNhY2hlJ1xuICAgICAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgZGlyZWN0b3J5XG4gICAgICovXG4gICAgc2V0Q2FjaGVEaXJlY3RvcnlOYW1lKG5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IGRlZmF1bHQgaGVpZ2h0IGZvciBpbWFnZXMgdGhhdCBhcmUgbm90IHVzaW5nIDxpbWc+IHRhZ1xuICAgICAqIEBwYXJhbSBoZWlnaHQgaGVpZ2h0XG4gICAgICovXG4gICAgc2V0SGVpZ2h0KGhlaWdodDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgZGVmYXVsdCB3aWR0aCBmb3IgaW1hZ2VzIHRoYXQgYXJlIG5vdCB1c2luZyA8aW1nPiB0YWdcbiAgICAgKiBAcGFyYW0gd2lkdGggV2lkdGhcbiAgICAgKi9cbiAgICBzZXRXaWR0aCh3aWR0aDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFbmFibGUgZGlzcGxheSBtb2RlIGZvciBpbWFnZXMgdGhhdCBhcmUgbm90IHVzaW5nIDxpbWc+IHRhZ1xuICAgICAqIEBwYXJhbSBkaXNwbGF5IERpc3BsYXkgbW9kZVxuICAgICAqL1xuICAgIHNldERpc3BsYXkoZGlzcGxheTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVc2UgPGltZz4gdGFnIGJ5IGRlZmF1bHRcbiAgICAgKiBAcGFyYW0gdXNlIHNldCB0byB0cnVlIHRvIHVzZSA8aW1nPiB0YWcgYnkgZGVmYXVsdFxuICAgICAqL1xuICAgIHVzZUltYWdlVGFnKHVzZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IGRlZmF1bHQgYmFja2dyb3VuZCBzaXplIGZvciBpbWFnZXMgdGhhdCBhcmUgbm90IHVzaW5nIDxpbWc+IHRhZ1xuICAgICAqIEBwYXJhbSBiYWNrZ3JvdW5kU2l6ZSBCYWNrZ3JvdW5kIHNpemVcbiAgICAgKi9cbiAgICBzZXRCYWNrZ3JvdW5kU2l6ZShiYWNrZ3JvdW5kU2l6ZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgYmFja2dyb3VuZCByZXBlYXQgZm9yIGltYWdlcyB0aGF0IGFyZSBub3QgdXNpbmcgPGltZz4gdGFnXG4gICAgICogQHBhcmFtIGJhY2tncm91bmRSZXBlYXQgQmFja2dyb3VuZCByZXBlYXRcbiAgICAgKi9cbiAgICBzZXRCYWNrZ3JvdW5kUmVwZWF0KGJhY2tncm91bmRSZXBlYXQ6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IGZhbGxiYWNrIFVSTCB0byB1c2Ugd2hlbiBpbWFnZSBzcmMgaXMgdW5kZWZpbmVkIG9yIGRpZCBub3QgcmVzb2x2ZS5cbiAgICAgKiBUaGlzIGltYWdlIHdpbGwgbm90IGJlIGNhY2hlZC4gVGhpcyBzaG91bGQgaWRlYWxseSBiZSBhIGxvY2FsbHkgc2F2ZWQgaW1hZ2UuXG4gICAgICogQHBhcmFtIGZhbGxiYWNrVXJsIFRoZSByZW1vdGUgb3IgbG9jYWwgVVJMIG9mIHRoZSBpbWFnZVxuICAgICAqL1xuICAgIHNldEZhbGxiYWNrVXJsKGZhbGxiYWNrVXJsOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbWF4aW11bSBudW1iZXIgb2YgYWxsb3dlZCBjb25uZWN0aW9ucyBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAqIEBwYXJhbSBjb25jdXJyZW5jeVxuICAgICAqL1xuICAgIHNldENvbmN1cnJlbmN5KGNvbmN1cnJlbmN5OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1heGltdW0gYWxsb3dlZCBjYWNoZSBzaXplXG4gICAgICogQHBhcmFtIGNhY2hlU2l6ZSBDYWNoZSBzaXplIGluIGJ5dGVzXG4gICAgICovXG4gICAgc2V0TWF4aW11bUNhY2hlU2l6ZShjYWNoZVNpemU6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWF4aW11bSBhbGxvd2VkIGNhY2hlIGFnZVxuICAgICAqIEBwYXJhbSBjYWNoZUFnZSBNYXhpbXVtIGNhY2hlIGFnZSBpbiBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBzZXRNYXhpbXVtQ2FjaGVBZ2UoY2FjaGVBZ2U6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSByZXR1cm4gdHlwZSBvZiBjYWNoZWQgaW1hZ2VzXG4gICAgICogQHBhcmFtIGltYWdlUmV0dXJuVHlwZSBUaGUgcmV0dXJuIHR5cGU7IGVpdGhlciAnYmFzZTY0JyBvciAndXJpJ1xuICAgICAqL1xuICAgIHNldEltYWdlUmV0dXJuVHlwZShpbWFnZVJldHVyblR5cGU6ICdiYXNlNjQnIHwgJ3VyaScpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVmYXVsdCBzcGlubmVyIG5hbWVcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqL1xuICAgIHNldFNwaW5uZXJOYW1lKG5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBkZWZhdWx0IHNwaW5uZXIgY29sb3JcbiAgICAgKiBAcGFyYW0gY29sb3JcbiAgICAgKi9cbiAgICBzZXRTcGlubmVyQ29sb3IoY29sb3I6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IGhlYWRlcnMgb3B0aW9ucyBmb3IgdGhlIEh0dHBDbGllbnQgdHJhbnNmZXJzLlxuICAgICAqIEBwYXJhbSBoZWFkZXJzXG4gICAgICovXG4gICAgc2V0SHR0cEhlYWRlcnMoaGVhZGVyczogSHR0cEhlYWRlcnMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBvcHRpb25zIGZvciB0aGUgRmlsZVRyYW5zZmVyIHBsdWdpblxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQGRlcHJlY2F0ZWQgRmlsZVRyYW5zZmVyIHBsdWdpbiByZW1vdmVkLlxuICAgICAqL1xuICAgIHNldEZpbGVUcmFuc2Zlck9wdGlvbnMob3B0aW9uczoge1xuICAgICAgICB0cnVzdEFsbEhvc3RzOiBib29sZWFuO1xuICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRW5hYmxlL0Rpc2FibGUgdGhlIHNhdmUgZmlsZW5hbWUgb2YgY2FjaGVkIGltYWdlcyB3aXRoIGV4dGVuc2lvbi4gIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEBwYXJhbSBlbmFibGUgc2V0IHRvIHRydWUgdG8gZW5hYmxlXG4gICAgICovXG4gICAgc2V0RmlsZU5hbWVDYWNoZWRXaXRoRXh0ZW5zaW9uKGVuYWJsZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IGZhbGxiYWNrIGV4dGVuc2lvbiBmaWxlbmFtZSBvZiBjYWNoZWQgaW1hZ2VzLiAgRGVmYXVsdHMgdG8gJy5qcGcnLlxuICAgICAqIEBwYXJhbSBleHRlbnNpb24gZmFsbGJhY2sgZXh0ZW5zaW9uIChlLnggLmpwZylcbiAgICAgKi9cbiAgICBzZXRGYWxsYmFja0ZpbGVOYW1lQ2FjaGVkRXh0ZW5zaW9uKGV4dGVuc2lvbjogc3RyaW5nKTogdm9pZDtcbn1cbiJdfQ==