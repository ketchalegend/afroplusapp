import { EventEmitter, ElementRef, QueryList } from "@angular/core";
import { AgmInfoWindow, MarkerManager, GoogleMapsAPIWrapper } from "@agm/core";
import * as ɵngcc0 from '@angular/core';
export interface latLng {
    latitude: number;
    longitude: number;
}
export interface bounds {
    x: latLng;
    y: latLng;
}
export interface latLngPlus {
    latitude: number;
    longitude: number;
    bounds?: bounds;
}
export declare class AgmOverlay {
    protected _mapsWrapper: GoogleMapsAPIWrapper;
    private _markerManager;
    latitude: number;
    longitude: number;
    visible: boolean;
    zIndex: number;
    bounds: bounds;
    markerClick: EventEmitter<void>;
    openInfoWindow: boolean;
    infoWindow: QueryList<AgmInfoWindow>;
    draggable: boolean;
    template: ElementRef;
    destroyed: boolean;
    overlayView: any;
    private _observableSubscriptions;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _markerManager: MarkerManager);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: any): void;
    onChanges(changes: any): void;
    onChangesOverride(changes: any): void;
    ngOnDestroy(): void;
    destroy(): Promise<any>;
    private handleInfoWindowUpdate;
    load(): Promise<void>;
    getOverlay(map: any): any;
    handleTap(): void;
    _addEventListeners(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AgmOverlay, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AgmOverlay, "agm-overlay", never, { "visible": "visible"; "zIndex": "zIndex"; "openInfoWindow": "openInfoWindow"; "draggable": "markerDraggable"; "latitude": "latitude"; "longitude": "longitude"; "bounds": "bounds"; }, { "markerClick": "markerClick"; }, ["infoWindow"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWdtT3ZlcmxheS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiQWdtT3ZlcmxheS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMENBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBRdWVyeUxpc3QgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQWdtSW5mb1dpbmRvdywgTWFya2VyTWFuYWdlciwgR29vZ2xlTWFwc0FQSVdyYXBwZXIgfSBmcm9tIFwiQGFnbS9jb3JlXCI7XG5leHBvcnQgaW50ZXJmYWNlIGxhdExuZyB7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgYm91bmRzIHtcbiAgICB4OiBsYXRMbmc7XG4gICAgeTogbGF0TG5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBsYXRMbmdQbHVzIHtcbiAgICBsYXRpdHVkZTogbnVtYmVyO1xuICAgIGxvbmdpdHVkZTogbnVtYmVyO1xuICAgIGJvdW5kcz86IGJvdW5kcztcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFnbU92ZXJsYXkge1xuICAgIHByb3RlY3RlZCBfbWFwc1dyYXBwZXI6IEdvb2dsZU1hcHNBUElXcmFwcGVyO1xuICAgIHByaXZhdGUgX21hcmtlck1hbmFnZXI7XG4gICAgbGF0aXR1ZGU6IG51bWJlcjtcbiAgICBsb25naXR1ZGU6IG51bWJlcjtcbiAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIHpJbmRleDogbnVtYmVyO1xuICAgIGJvdW5kczogYm91bmRzO1xuICAgIG1hcmtlckNsaWNrOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgb3BlbkluZm9XaW5kb3c6IGJvb2xlYW47XG4gICAgaW5mb1dpbmRvdzogUXVlcnlMaXN0PEFnbUluZm9XaW5kb3c+O1xuICAgIGRyYWdnYWJsZTogYm9vbGVhbjtcbiAgICB0ZW1wbGF0ZTogRWxlbWVudFJlZjtcbiAgICBkZXN0cm95ZWQ6IGJvb2xlYW47XG4gICAgb3ZlcmxheVZpZXc6IGFueTtcbiAgICBwcml2YXRlIF9vYnNlcnZhYmxlU3Vic2NyaXB0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihfbWFwc1dyYXBwZXI6IEdvb2dsZU1hcHNBUElXcmFwcGVyLCBfbWFya2VyTWFuYWdlcjogTWFya2VyTWFuYWdlcik7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBvbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBvbkNoYW5nZXNPdmVycmlkZShjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgZGVzdHJveSgpOiBQcm9taXNlPGFueT47XG4gICAgcHJpdmF0ZSBoYW5kbGVJbmZvV2luZG93VXBkYXRlO1xuICAgIGxvYWQoKTogUHJvbWlzZTx2b2lkPjtcbiAgICBnZXRPdmVybGF5KG1hcDogYW55KTogYW55O1xuICAgIGhhbmRsZVRhcCgpOiB2b2lkO1xuICAgIF9hZGRFdmVudExpc3RlbmVycygpOiB2b2lkO1xufVxuIl19